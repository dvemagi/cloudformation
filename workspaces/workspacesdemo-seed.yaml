AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0

Description: > 
  Cloudformation per la creazione di una istanza di seed che genera 
  ruolo ed istanza ec2. lancia poi comandi aws per registrare la directory, creare due utenti AD, creare due workspace e ...

Parameters:
  EnvironmentTag:
    Description: Inserisci il tag della struttura
    Type: String
  KeyName:
    Description: Scegli un keypair esistente
    Type: String
  PublicSubnet0:
    Description: Subnet pubblica 0
    Type: String
  PrivateSubnet0:
    Type: String 
  PrivateSubnet1: 
    Type: String
  VPCID:
    Description: VPC Id
    Type: String
  Directory:
      Type: String
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
Resources:
# Creazione dell'istanza di seed
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: [] 
          files:
            /home/ec2-user/wks01.json:
              content: !Sub |
                    {
                        "Workspaces" : [
                                          {
                                          "DirectoryId" : "${Directory}",
                                          "UserName" : "demo01",
                                          "BundleId" : "wsb-bh8rsxt14",
                                          "WorkspaceProperties": {
                                              "RunningMode": "AUTO_STOP", 
                                              "RunningModeAutoStopTimeoutInMinutes": 60 
                                               }  
                                        }
                                       ]
                       }
            /home/ec2-user/wks02.json:
              content: !Sub |
                    {
                        "Workspaces" : [
                                          {
                                          "DirectoryId" : "${Directory}",
                                          "UserName" : "demo02",
                                          "BundleId" : "wsb-clj85qzj1",
                                          "WorkspaceProperties": {
                                              "RunningMode": "AUTO_STOP", 
                                              "RunningModeAutoStopTimeoutInMinutes": 60 
                                               }  
                                        }
                                       ]
                       }            

          commands:
            10_register_dir:
              command:
                'Fn::Join':
                      - ''
                      - - 'aws --region '
                        - !Ref 'AWS::Region' 
                        - ' workspaces register-workspace-directory --directory-id ' 
                        - !Ref 'Directory'
                        - ' '
                        - '--subnet-ids '
                        - !Ref 'PrivateSubnet0' 
                        - ' '
                        - !Ref 'PrivateSubnet1'
                        - ' --enable-work-docs'
                        - |+

              ignoreErrors: true 
            15_sleep:
              command:
                'Fn::Join':
                      - ''
                      - - 'sleep 30'
                        - |+

              ignoreErrors: true 

            20_create_user_01:
              command:
                'Fn::Join':
                      - ''
                      - - 'aws --region '
                        - !Ref 'AWS::Region' 
                        - ' workdocs create-user --organization-id '
                        - !Ref Directory  
                        - ' --username demo01 --email-address demo01@site.awsapps.com --given-name demo01 --surname icsdemo '
                        - '--password DemoPassword0'
                        - |+

              ignoreErrors: true
            
            25_create_user_02:
              command:
                'Fn::Join':
                      - ''
                      - - 'aws --region '
                        - !Ref 'AWS::Region' 
                        - ' workdocs create-user --organization-id '
                        - !Ref Directory  
                        - ' --username demo02 --email-address demo02@site.awsapps.com --given-name demo02 --surname icsdemo '
                        - '--password DemoPassword0'
                        - |+

              ignoreErrors: true

            30_create_workspace_01:
              command:
                'Fn::Join':
                      - ''
                      - - 'aws --region '
                        - !Ref 'AWS::Region' 
                        - ' workspaces create-workspaces --cli-input-json file:///home/ec2-user/wks01.json '
                        - |+

              ignoreErrors: true
            35_create_workspace_01:
              command:
                'Fn::Join':
                      - ''
                      - - 'aws --region '
                        - !Ref 'AWS::Region' 
                        - ' workspaces create-workspaces --cli-input-json file:///home/ec2-user/wks02.json '
                        - |+

              ignoreErrors: true
          
                     
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref 'KeyName'
      ImageId: !Ref LatestAmiId
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet0
          GroupSet:
            - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref WKSInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentTag}-seed
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe 
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource EC2Instance --region '
            - !Ref 'AWS::Region'
            - |+
      

      
#Creazione di un security group per l'istanza di seed
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupName: seed-sg
      GroupDescription: abilita SSH da anywhere
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
  
# Creazione del Ruolo e policy 
  WKSRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      RoleName: !Sub ${EnvironmentTag}-role
  WKSPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "workspaces:*",
                "ds:*",
                "iam:PassRole",
                "iam:GetRole",
                "iam:CreateRole",
                "iam:PutRolePolicy",
                "kms:ListAliases",
                "kms:ListKeys",
                "ec2:CreateVpc",
                "ec2:CreateSubnet",
                "ec2:CreateNetworkInterface",
                "ec2:CreateInternetGateway",
                "ec2:CreateRouteTable",
                "ec2:CreateRoute",
                "ec2:CreateTags",
                "ec2:CreateSecurityGroup",
                "ec2:DescribeInternetGateways",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeRouteTables",
                "ec2:DescribeVpcs",
                "ec2:DescribeSubnets",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeAvailabilityZones",
                "ec2:AttachInternetGateway",
                "ec2:AssociateRouteTable",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteNetworkInterface",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress",
                "workdocs:CreateUser",
                "workdocs:RegisterDirectory",
                "workdocs:DeregisterDirectory",
                "workdocs:AddUserToGroup",
                "workdocs:RemoveUserFromGroup"
              ],
              "Resource": "*"
              }
              ]
             }
      Roles: 
        - !Ref WKSRole
      PolicyName: !Sub ${EnvironmentTag}-pol

  WKSInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref WKSRole


Outputs:
  StackName:
    Description: This is the stack name.
    Value:
      Ref: AWS::StackName
  InstanceId:
    Description: InstanceId dell'istanza appena creata
    Value: !Ref 'EC2Instance'
  WKSPolicy:
    Description: Policy per workspaces
    Value: !Ref WKSPolicy
  PublicIp:
    Description: Instace Public IP 
    Value: !GetAtt EC2Instance.PublicIp
 
  